# Документация файлов проекта Protein Shop t.me/badmen

## Описание файлов

### README.md
- **Назначение**: Предоставляет обзор проекта и инструкции по установке и запуску.
- **Функциональность**: Описывает функциональность приложения (аутентификация, каталог товаров, оформление заказов, система лояльности), перечисляет предварительные требования (Go, Node.js, Docker, Android Studio), дает пошаговые инструкции по настройке базы данных, серверной и клиентской частей, а также указания по тестированию и устранению неполадок.
- **Детали реализации**: Написан в формате Markdown, включает разделы о функциональности, установке, запуске, тестировании и устранении ошибок. Содержит команды для запуска PostgreSQL через Docker, настройки зависимостей и запуска приложения на эмуляторе Android.

### documents.md
- **Назначение**: Документирует назначение и функциональность каждого файла проекта.
- **Функциональность**: Служит справочником для разработчиков, описывая роль каждого файла, его содержимое и вклад в проект. Помогает новым участникам команды или рецензентам понять структуру и логику приложения.
- **Детали реализации**: Написан в формате Markdown, организован по файлам с акцентом на их назначение, функциональность и технические детали. Текущий документ является примером такого файла.

### db/schema.sql
- **Назначение**: Определяет структуру базы данных PostgreSQL.
- **Функциональность**: Создает таблицы для хранения данных приложения: `users` (пользователи), `sessions` (сессии), `products` (продукты), `orders` (заказы), `order_items` (элементы заказа) и `loyalty_points` (бонусные баллы). Устанавливает связи между таблицами через внешние ключи и добавляет индексы для оптимизации запросов.
- **Детали реализации**: Использует расширение `uuid-ossp` для генерации UUID в качестве первичных ключей. Определяет ограничения целостности (например, `UNIQUE` для email пользователей, `NOT NULL` для обязательных полей) и индексы (например, `idx_users_email`) для повышения производительности.

### db/seed.sql
- **Назначение**: Заполняет базу данных начальными данными для тестирования.
- **Функциональность**: Добавляет тестовые записи, включая три продукта (Whey Protein, BCAA Supplement, Protein Bar), тестового пользователя (`test@example.com` с хэшем пароля Argon2), один завершенный заказ, элементы заказа и бонусные баллы (5 баллов за покупку).
- **Детали реализации**: Использует SQL-команды `INSERT` с UUID и временными метками (`CURRENT_TIMESTAMP`). Пароль пользователя хэширован с фиксированной солью для воспроизводимости.

### protein-shop-api/.env
- **Назначение**: Хранит конфиденциальные переменные окружения для серверной части.
- **Функциональность**: Содержит `DATABASE_URL` для подключения к PostgreSQL (например, `postgres://protein_shop:securepassword@localhost:5432/protein_shop_db`) и `JWT_SECRET` для подписи JWT-токенов. Загружается библиотекой `godotenv` при старте приложения.
- **Детали реализации**: Формат ключ-значение, чувствителен к безопасности (игнорируется в `.gitignore`). Требует замены `your-secret-key` на уникальный секретный ключ.

### protein-shop-api/go.mod
- **Назначение**: Управляет зависимостями Go-модуля.
- **Функциональность**: Определяет модуль `uniproj` и зависимости: `gorilla/mux` (роутинг HTTP), `jackc/pgx/v5` (драйвер PostgreSQL), `golang-jwt/jwt/v5` (JWT-аутентификация), `godotenv` (загрузка `.env`), `golang.org/x/crypto` (Argon2-хэширование). Указывает версии для воспроизводимости сборки.
- **Детали реализации**: Создается командой `go mod init uniproj`. Обновляется через `go mod tidy` для синхронизации зависимостей.

### protein-shop-api/main.go
- **Назначение**: Точка входа для серверной части приложения.
- **Функциональность**: Инициализирует подключение к базе данных через `db.InitDB()`, настраивает HTTP-сервер с помощью `gorilla/mux`, регистрирует маршруты API (например, `/auth/register`, `/products`, `/orders`) и запускает сервер на порту 8080. Включает маршрут `/health` для проверки состояния сервера.
- **Детали реализации**: Загружает переменные окружения с помощью `godotenv`. Использует middleware для защищенных маршрутов (например, `/orders` с `AuthMiddleware`). Закрывает соединение с базой при завершении работы.

### protein-shop-api/api/auth.go
- **Назначение**: Реализует обработчики для аутентификации пользователей.
- **Функциональность**: Обрабатывает запросы на регистрацию (`/auth/register`) и вход (`/auth/login`). При регистрации хэширует пароль с помощью `HashPassword`, сохраняет пользователя в базе и возвращает ID. При входе проверяет пароль через `VerifyPassword`, создает JWT-токен и сохраняет сессию.
- **Детали реализации**: Использует `pgx` для запросов к базе, `jwt/v5` для генерации токенов. Возвращает JSON-ответы с кодами состояния (например, 201 для успешной регистрации, 401 для неверных учетных данных).

### protein-shop-api/api/auth_test.go
- **Назначение**: Содержит модульные тесты для обработчиков аутентификации.
- **Функциональность**: Тестирует `RegisterHandler`, отправляя POST-запрос с тестовыми данными (`test3@example.com`, `StrongPass123!`) и проверяя код состояния (201) и сообщение (`User registered successfully`).
- **Детали реализации**: Использует пакет `testing` и библиотеку `httptest` для имитации HTTP-запросов. Требует активного подключения к базе данных для выполнения.

### protein-shop-api/api/auth_utils.go
- **Назначение**: Предоставляет утилиты для работы с паролями.
- **Функциональность**: Реализует функции `HashPassword` (хэширование пароля с Argon2) и `VerifyPassword` (проверка пароля). Использует случайную 16-байтную соль, параметры Argon2 (100 итераций, 64 МБ памяти, 4 потока, 32-байтный ключ) и кодирование base64 для хранения.
- **Детали реализации**: Зависит от `golang.org/x/crypto/argon2`. Обеспечивает безопасность паролей и воспроизводимость проверок.

### protein-shop-api/api/loyalty.go
- **Назначение**: Управляет бонусными баллами пользователей.
- **Функциональность**: Обрабатывает GET-запросы на `/loyalty/points`, возвращая баланс и историю бонусных баллов для аутентифицированного пользователя. Извлекает данные из таблицы `loyalty_points`, сортируя по дате создания.
- **Детали реализации**: Использует `pgx` для выполнения SQL-запросов. Возвращает JSON с полями `balance` (сумма баллов) и `history` (список записей). Требует `user_id` из контекста JWT.

### protein-shop-api/api/orders.go
- **Назначение**: Обрабатывает создание и получение заказов.
- **Функциональность**: Реализует POST `/orders` для создания заказа (обновляет запасы, создает элементы заказа, начисляет баллы в транзакции) и GET `/orders` для получения истории заказов с деталями (названия продуктов, количество, цены). Начисляет 1 балл за каждые $10.
- **Детали реализации**: Использует транзакции `pgx` для атомарности. Проверяет наличие товаров на складе. Возвращает JSON с информацией о заказе или списком заказов.

### protein-shop-api/api/products.go
- **Назначение**: Предоставляет список доступных продуктов.
- **Функциональность**: Обрабатывает GET-запросы на `/products`, возвращая все записи из таблицы `products` (ID, название, описание, цена, запас, дата создания).
- **Детали реализации**: Использует `pgx` для выборки данных. Возвращает JSON-массив продуктов. Не требует аутентификации.

### protein-shop-api/api/profile.go
- **Назначение**: Возвращает информацию о профиле пользователя.
- **Функциональность**: Обрабатывает GET-запросы на `/profile`, возвращая данные пользователя (ID, email, дата регистрации) для аутентифицированного пользователя.
- **Детали реализации**: Извлекает `user_id` из контекста JWT, выполняет SQL-запрос через `pgx` и возвращает JSON-объект.

### protein-shop-api/db/db.go
- **Назначение**: Управляет подключением к базе данных PostgreSQL.
- **Функциональность**: Инициализирует глобальное соединение (`Conn`) с помощью `pgx.Connect`, используя `DATABASE_URL` из `.env`. Предоставляет функцию `CloseDB` для закрытия соединения.
- **Детали реализации**: Зависит от `jackc/pgx/v5`. Выполняет подключение в контексте `context.Background()`. Логирует ошибки при сбоях подключения.

### protein-shop-api/middleware/auth.go
- **Назначение**: Реализует middleware для проверки аутентификации.
- **Функциональность**: Проверяет наличие и валидность JWT-токена в заголовке `Authorization` (формата `Bearer <token>`). Верифицирует токен с помощью `jwt/v5` и проверяет активность сессии в таблице `sessions`. Добавляет `user_id` в контекст запроса.
- **Детали реализации**: Возвращает ошибку 401 при отсутствии или недействительности токена. Использует `JWT_SECRET` из `.env`.

### protein-shop-api/models/models.go
- **Назначение**: Определяет структуры данных для приложения.
- **Функциональность**: Содержит Go-структуры (`User`, `Session`, `Product`, `Order`, `OrderItem`, `LoyaltyPoint`) с полями, соответствующими таблицам базы данных. Использует типы `uuid.UUID` и `time.Time` для идентификаторов и временных меток.
- **Детали реализации**: Поля аннотированы тегами `json` для сериализации в JSON. Структуры используются для взаимодействия между API и базой данных.

### ProteinShopApp/App.js
- **Назначение**: Точка входа для React Native приложения.
- **Функциональность**: Рендерит основной компонент приложения, оборачивая его в `AuthProvider` для управления аутентификацией. Подключает навигатор `AppNavigator` для управления экранами.
- **Детали реализации**: Использует React и импортирует `AuthContext` для глобального состояния аутентификации.

### ProteinShopApp/package.json
- **Назначение**: Управляет зависимостями и скриптами для клиентской части.
- **Функциональность**: Определяет зависимости (например, `react-native`, `axios`, `@react-navigation`), dev-зависимости (например, `jest`, `eslint`) и скрипты для запуска (`npm start`), сборки (`react-native run-android`) и тестирования (`npm test`).
- **Детали реализации**: Указывает минимальную версию Node.js (`>=18`). Создается автоматически при инициализации проекта React Native.

### ProteinShopApp/src/api/api.js
- **Назначение**: Настраивает HTTP-клиент для взаимодействия с API.
- **Функциональность**: Создает экземпляр `axios` с базовым URL (`http://localhost:8080` или `http://10.0.2.2:8080` для эмулятора Android). Добавляет перехватчик запросов для включения JWT-токена из `AsyncStorage`. Предоставляет функции для вызовов API: `register`, `login`, `getProducts`, `createOrder`, `getOrders`, `getLoyaltyPoints`, `getProfile`.
- **Детали реализации**: Использует `axios` для HTTP-запросов и `@react-native-async-storage/async-storage` для хранения токенов.

### ProteinShopApp/src/navigation/AppNavigator.js
- **Назначение**: Определяет структуру навигации приложения.
- **Функциональность**: Использует `react-navigation` для создания стековой и вкладочной навигации. Показывает экраны `Login` и `Register` для неаутентифицированных пользователей и вкладки `Home` (каталог), `Points` (баллы), `Profile` (профиль) для аутентифицированных. Переключает маршруты на основе состояния `isAuthenticated` из `AuthContext`.
- **Детали реализации**: Использует `NavigationContainer`, `createBottomTabsNavigator` и `createStackNavigator`. Скрывает заголовки для улучшения UX.

### ProteinShopApp/src/screens/CatalogScreen.js
- **Назначение**: Отображает каталог продуктов с возможностью добавления в корзину.
- **Функциональность**: Загружает список продуктов через `getProducts`, отображает их в `FlatList` с названием, описанием и ценой. Позволяет добавлять продукты в корзину (хранится в состоянии `cart`) и переходить к оформлению заказа через `OrderPlacementScreen`.
- **Детали реализации**: Использует `useState` и `useEffect` для управления данными. Стилизован с помощью `StyleSheet` (например, карточки продуктов, кнопка "Добавить в корзину").

### ProteinShopApp/src/screens/LoginScreen.js
- **Назначение**: Реализует экран входа в приложение.
- **Функциональность**: Принимает email и пароль через `TextInput`, вызывает `handleLogin` из `AuthContext` для аутентификации. Показывает ошибки через `Alert` и перенаправляет на главный экран при успехе. Содержит ссылку на экран регистрации.
- **Детали реализации**: Использует `useState` для управления полями ввода и `useContext` для доступа к `AuthContext`. Стили включают логотип и кнопку входа.

### ProteinShopApp/src/screens/LoginScreen.test.js
- **Назначение**: Содержит тесты для экрана входа.
- **Функциональность**: Проверяет корректный рендеринг компонента `LoginScreen` и вызов функции `handleLogin` с правильными параметрами при нажатии кнопки "Log In".
- **Детали реализации**: Использует `@testing-library/react-native` для рендеринга и имитации событий. Тестирует взаимодействие с `AuthContext`.

### ProteinShopApp/src/screens/OrderPlacementScreen.js
- **Назначение**: Реализует экран оформления заказа.
- **Функциональность**: Отображает товары в корзине (полученные из `CatalogScreen`), загружает данные о продуктах через `getProducts`, вычисляет итоговую сумму и показывает потенциальные бонусные баллы (1 за $10). Вызывает `createOrder` для оформления заказа и перенаправляет на главный экран.
- **Детали реализации**: Использует `FlatList` для отображения корзины, `useEffect` для загрузки продуктов. Обрабатывает состояния загрузки и ошибки через `Alert`.

### ProteinShopApp/src/screens/PointsScreen.js
- **Назначение**: Показывает бонусные баллы и историю заказов.
- **Функциональность**: Загружает данные через `getLoyaltyPoints` и `getOrders`, отображает баланс баллов и список заказов (ID, дата, сумма, статус) в `FlatList`. Показывает ошибки через `Alert`.
- **Детали реализации**: Использует `useEffect` для параллельной загрузки данных с помощью `Promise.all`. Стили включают секцию баланса и карточки заказов.

### ProteinShopApp/src/screens/ProfileScreen.js
- **Назначение**: Отображает информацию о профиле пользователя.
- **Функциональность**: Загружает данные профиля (email, дата регистрации) через `getProfile` и показывает кнопку выхода, вызывающую `logout` из `AuthContext`. Обрабатывает ошибки через `Alert`.
- **Детали реализации**: Использует `useState` и `useEffect` для управления данными. Стили включают секцию информации и кнопку выхода (красного цвета для акцента).

### ProteinShopApp/src/screens/RegisterScreen.js
- **Назначение**: Реализует экран регистрации.
- **Функциональность**: Принимает email, пароль и подтверждение пароля через `TextInput`. Проверяет совпадение паролей, вызывает `handleRegister` из `AuthContext` и автоматически выполняет вход при успехе. Содержит ссылку на экран входа.
- **Детали реализации**: Использует `useState` для полей ввода и `useContext` для `AuthContext`. Показывает ошибки через `Alert`. Стили аналогичны `LoginScreen`.

### ProteinShopApp/src/utils/AuthContext.js
- **Назначение**: Управляет глобальным состоянием аутентификации.
- **Функциональность**: Создает `AuthContext` для хранения статуса `isAuthenticated` и данных пользователя. Реализует функции `handleLogin`, `handleRegister` и `logout`, сохраняя JWT-токен в `AsyncStorage`. Проверяет наличие токена при запуске приложения.
- **Детали реализации**: Использует `useState` и `useEffect` для инициализации состояния. Зависит от `api.js` для вызовов API и `@react-native-async-storage/async-storage` для хранения токенов.

### ProteinShopApp/src/assets/
- **Назначение**: Пустая директория для хранения статических ресурсов.
- **Функциональность**: Предназначена для размещения изображений, шрифтов или других активов, таких как логотипы или иконки, которые могут использоваться в интерфейсе.
- **Детали реализации**: В текущей версии не содержит файлов, но может быть расширена для добавления графики.

### ProteinShopApp/src/components/
- **Назначение**: Пустая директория для пользовательских UI-компонентов.
- **Функциональность**: Предназначена для хранения модульных компонентов React Native, таких как кнопки, карточки или формы, для повторного использования в экранах.
- **Детали реализации**: В текущей версии не содержит файлов, но зарезервирована для будущей модуляризации интерфейса.

## Включение проекта в дипломную работу

Проект `protein-shop` можно эффективно интегрировать в дипломную работу, чтобы продемонстрировать навыки программирования, проектирования баз данных и разработки мобильных приложений. Ниже приведены рекомендации по внедрению проекта в диплом:

### Структура дипломной работы
- **Теоретическая часть**:
  - Объясните выбор технологий: Go для высокой производительности сервера, React Native для кроссплатформенного мобильного интерфейса, PostgreSQL для надежного хранения данных.
  - Опишите ключевые алгоритмы, такие как хэширование паролей с Argon2 (в `auth_utils.go`) и механизм JWT-аутентификации (в `auth.go`, `middleware/auth.go`).
  - Охарактеризуйте архитектуру REST API и паттерн MVC, реализованный в проекте (разделение на модели, обработчики и базу данных).
- **Практическая часть**:
  - **Техническая реализация**:
    - Опишите схему базы данных, используя `schema.sql`.
    - Детализируйте архитектуру API: маршруты в `main.go`, middleware в `auth.go`, обработчики в `api/`.
    - Охарактеризуйте клиентскую часть: навигация (`AppNavigator.js`), экраны (`screens/`), управление состоянием (`AuthContext.js`).
- **Анализ и результаты**:
  - Оцените производительность API (например, время ответа на запросы, оптимизация запросов через индексы в `schema.sql`).
  - Обсудите удобство интерфейса, ссылаясь на принципы UX (например, интуитивная навигация в `AppNavigator.js`).
  - Предложите улучшения: добавление поиска продуктов, сохранение корзины в `AsyncStorage`, развертывание на облаке (например, Heroku).
- **Заключение**: Подведите итоги, подчеркнув, что проект демонстрирует комплексное решение для e-commerce. Укажите потенциал для масштабирования (например, интеграция платежных систем).
- **Приложения**:
  - Включите листинги ключевых файлов: `main.go`, `App.js`, `schema.sql`, `OrderPlacementScreen.js`.
- **Ответы на вопросы**:
  - Объясните выбор технологий, подчеркнув их преимущества (например, производительность Go, кроссплатформенность React Native).
  - Будьте готовы обсудить безопасность (JWT в `auth.go`, Argon2 в `auth_utils.go`) и оптимизацию базы данных (индексы в `schema.sql`).
  - Подготовьтесь к вопросам о тестировании, ссылаясь на `auth_test.go` и `LoginScreen.test.js`.